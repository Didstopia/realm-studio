#!groovy

@Library('realm-ci') _

jobWrapper {
  stage('Checkout') {
    node('docker') {
      checkoutAtVersion()
      // TODO: Check that the tag matches the package.json version
      def packageJson = readJSON(file: 'package.json')
      assert "v${packageJson.version}" == env.VERSION_TAG : "Tag doesn't match package.json version"
    }
  }

  /*
  stage('Build, test and package') {
    parallel (
      macos: packageOnMacos(),
      others: packageOthers()
    )
  }
  */

  stage('Publish') {
    // Upload the build artifacts to S3
    def packageJson = readJSON(file: 'package.json')
    input(message: "Ready to publish v${packageJson.version}?", id: 'publish')
    def s3Config = packageJson.build.publish[0]
    def bucket = "${s3Config.bucket}/${s3Config.path}"
    echo bucket
    // rlmS3Put(source: 'myfile.txt', bucket: 'static.realm.io/some/folder')
  }
}

def checkoutAtVersion() {
  checkout([
    $class: 'GitSCM',
    branches: [[name: 'refs/tags/${VERSION_TAG}']],
    doGenerateSubmoduleConfigurations: false,
    extensions: [
      [$class: 'WipeWorkspace'],
      [$class: 'CleanCheckout'],
    ],
    gitTool: 'native git',
    submoduleCfg: [],
    userRemoteConfigs: [[
      credentialsId: 'realm-ci-ssh',
      name: 'origin',
      refspec: '+refs/tags/*:refs/remotes/origin/tags/* +refs/heads/*:refs/remotes/origin/*',
      url: 'git@github.com:realm/realm-studio.git'
    ]]
  ])
}

def packageOthers() {
  return {
    node('docker') {
      checkoutAtVersion()

      def workarea = pwd()
      def image = docker.image('electronuserland/builder:wine-chrome')
      image.inside("-e HOME=${workarea}") {
        sh 'npm install'
        sh 'npm run build'

        withCredentials([
          file(credentialsId: 'cose-sign-certificate-windows', variable: 'CSC_LINK'),
          string(credentialsId: 'cose-sign-password-windows', variable: 'CSC_KEY_PASSWORD')
        ]) {
          sh 'node_modules/.bin/electron-builder --linux --windows --publish never'
        }

        archiveArtifacts 'dist/*'
      }
    }
  }
}

def packageOnMacos() {
  return {
    node('macos') {
      checkoutAtVersion()

      def nodeVersion = readFile('.nvmrc').trim()
      nvm(version: nodeVersion) {
        sh 'npm install --quiet'
        sh 'npm run build'

        // Run the tests
        sh 'node_modules/.bin/xvfb-maybe npm test'

        // Build the package
        sh 'node_modules/.bin/electron-builder --publish never'

        archiveArtifacts 'dist/*'
      }
    }
  }
}
